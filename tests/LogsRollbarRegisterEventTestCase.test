<?php

/**
 * @file
 * Contains LogsHttpRegisterEventTestCase.
 */

class LogsRollbarRegisterEventTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Register event',
      'description' => 'Test registration of an event.',
      'group' => 'Logs HTTP',
    );
  }

  function setUp() {
    parent::setUp('logs_rollbar');

    // Add a dummy URL.
    variable_set('logs_rollbar_url', 'http://example.com');
  }

  /**
   * Test registration of an event.
   */
  function testRegisterEvent() {
    // Test severity.
    watchdog('logs_rollbar', 'Notice 1');
    $events = logs_rollbar_get_registered_events();
    $this->assertFalse($events, 'No notice events registered, as severity level was to high.');

    // Set severity.
    variable_set('logs_rollbar_severity_level', WATCHDOG_NOTICE);

    // Test single event.
    drupal_static_reset('logs_rollbar_events');
    watchdog('logs_rollbar', 'Notice 1');
    $events = logs_rollbar_get_registered_events();
    $this->assertEqual(count($events), 1, 'Notice events registered.');

    // Test multiple events.
    drupal_static_reset('logs_rollbar_events');
    // A duplcaited event
    watchdog('logs_rollbar', 'Notice 1');
    watchdog('logs_rollbar', 'Notice 1');

    watchdog('logs_rollbar', 'Notice 2');
    $events = logs_rollbar_get_registered_events();
    $this->assertEqual(count($events), 2, 'Multiple events registered');

    // Get the elements (as they are keyed by an md5 hash).
    $event1 = array_shift($events);
    $event2 = array_shift($events);

    $this->assertEqual($event1['message'], 'Notice 1', 'Correct first event registered.');
    $this->assertEqual($event2['message'], 'Notice 2', 'Correct second event registered.');
  }
}
